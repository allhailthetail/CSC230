#+title: Class Notes
#+startup: indent overview hideblocks entitiespretty

* Using Git

- [[https://gitbookdown.dallasdatascience.com/branching-git-branch.html][Using Branches with Git]]

- Caveats to creating a new branch, which branch you decide to start at matters, also:
  ~main~ - This will branch off your local branch on the machine itself
  ~HEAD~ - This is the current commit your working directory is pointing to /pointer to current branch/
  origin/main - the *main* branch on the remote repository (GitHub/GitLab/etc).

  Understanding which you're using is important, because you may have local changes you haven't synced to GitHub yet, etc.

- Something else

* Useful Tools for Web Development:

- [[https://alttext.ai/][AI-powered alt-text generator.]]
- [[https://www.w3schools.com/cssref/index.php][Complete CSS Reference]]
- [[https://makeschool.org/mediabook/oa/tracks/web-dev-with-node/your-first-website--landing-page/stylin-with-css/][CSS tutorial step-by-step]]
- [[https://www.w3schools.com/css/css3_flexbox.asp][W3 Schools Flexboxes]]
- [[https://www.w3schools.com/cssref/css_selectors.php][CSS Selectors Reference]]
- [[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][Flexbox Layout Guide]]
- [[https://webaim.org/resources/contrastchecker/][WebAim Contrast Checker]]

* Effective Web Design:
** Desirables
1. user-centric
2. Responsive
3. Aesthetically Pleasing
4. Call-to-action
5. Responsive page, fast load

** Undesirables
1. Interface overload
2. Distractions
3. Distracting color/typography
4. Bad search engine optimization SEO

* Submission Conventions

It's important to submit files correctly so the instructor can keep straight each student's work.

#+begin_quote
Rize Submission Standards:

APA - Times New Roman/Calibri 12pt double-spaced.
Set link to anyone with link...

---

Filename:

! Specific directions may override !

Last name and First Initial
Unit #
Name of Assignment
Date

i.e.
YoungerM_Unitxx_AssignmentName_mmddyyyy.ext

---
#+end_quote

* Week 3 - Basic HTML

Goal: Create your first webpage using VSCode and Liveserver extension.

** Importance of semantic HTML:
#+begin_quote
When implementing HTML, it’s important to structure content using semantic HTML for a few important reasons:

Accessibility: Screen readers use semantic tags to give users context (e.g., “Main content begins,” “Navigation menu,” etc.)
SEO: Search engines prioritize structured content. Using <header>, <article>, and <section> helps bots understand your site’s hierarchy.
Maintainability: It’s easier for other developers (or future you) to understand your page structure.

Let’s implement semantic HTML into our music page by refactoring the index.html page so that it uses a:

<header> for the page title and intro
<main> for content like lists or album write-ups
<article> to group artist information
<section> to break up main content
<nav> for navigation or site info
#+end_quote

* Week 4 - CSS Fundamentals

Goal: CSS transforms raw HTML into an inviting, usable website. *CSS styles the documents and describes how elements should be displayed.*
HTML is the foundation of the house, CSS is the wallpaper and decorations.

~<link>~ connects the CSS file to the HTML file. ~separation of concerns~ <-- Goes inside of ~<head>~ tag...

NOTE: this tag is odd, it's unbalanced, first instance is the ending tag with a "/"
#+begin_example html
    <link rel="stylesheet" href="./css/style.css" />
#+end_example

- [[https://www.w3schools.com/cssref/index.php][Complete CSS Reference]]
- [[https://makeschool.org/mediabook/oa/tracks/web-dev-with-node/your-first-website--landing-page/stylin-with-css/][CSS tutorial step-by-step]]

NOTE: for CSS, order of the rules matters also! Whatever is defined first (top-down) can be overridden by
a later definition in the .css file, so rules towards the end matter and how the file is organized matters...

** CSS Rulesets
- Two components:
  *selector* <-- Select the HTML element to style
  *property* <-- {property, value}

** CSS Selectors
- [[https://www.w3schools.com/cssref/css_selectors.php][CSS Selectors Reference]]

  selector - /header/
  property - /background-color/
  value - mistyrose

  Each selector has a scope {}
  Each declaration has a ;

  property : value format
  #+begin_example css
  header {
    background-color: mistyrose;
    text-align: center;
  }
  #+end_example

** CSS Classes
We can be much more specific on how we apply CSS to our page, i.e. more granular.

A class can be any name, just no spaces (use dashes)
~.my-class~ for example.

*NOTE:* Classes are one to many. Many HTML elements may be assigned to a single CSS class.

** CSS IDs:
Conversely, we can assign *unique* ideas to one and only one HTML element.

For example:
#+begin_example html
<p id="uniqueParagraph">Hello, World!</p>

<p id="uniqueParagraph-1">=Goodbye, World.</p>
#+end_example

#+begin_example css
#uniqueParagraph {
  color: blue;
}

#uniqueParagraph-1 {
  color: red;
}
#+end_example

** CSS Flexboxes
- [[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][Flexbox Layout Guide]]

- Raw HTML has issues:
  1. Some elements may be clustered very tightly
  2. Pictures may need to be arranged differently
  3. The footer needs to look better, more simplified?

- "Man cannot live on ~<br>~ alone..."

- *Two Components:*
  1. Flex container controls layoiut using display: in CSS.
  2. Flex item is a child element /of/ the container. Laid out in row/column automatically

* Week 5 - Usability and Accessibility

** Accessible Design
- Can someone using a screen reader understand your layout?
- Can someone with low vision read your text?
- Can someone using only a keyboard navigate your page?
- Someone using a screen reader because they are blind
- Someone who can’t use a mouse and navigates by keyboard
- Someone on a mobile device with a small screen
- Someone with colorblindness who can’t distinguish red from green
- Someone with cognitive disabilities who needs a clear structure
-
** Implementing Accessibility
- Using heading tags in order
  #+begin_example html
  <h1>My Music Page</h1>
  <h2>Featured Artist: Beyoncé</h2>
  <h3>Top Songs</h3>
  #+end_example
- Adding descriptive alt text to all images
- Checking color contrast
  [[https://webaim.org/resources/contrastchecker/][WebAim Contrast Checker]]
- Using descriptive link text
  #+begin_example html
  <!-- Good -->
  <a href="https://www.beyonce.com/">Learn more about Beyoncé</a>

  <!-- Bad -->
  <a href="https://www.beyonce.com/">Click here</a>
  #+end_example
- Add landmarks with semantic tags
  #+begin_example html
  <body>
  <header><h1>My Music Page</h1></header>
  <main>
    <section>
      <h2>Featured Artist</h2>
      <p>Beyoncé is an American singer...</p>
    </section>
  </main>
  <footer>
    <a href="page2.html">Go to Page 2</a>
  </footer>
</body>
  #+end_example

** Media Queries
- [[https://www.csschopper.com/blog/mobile-vs-desktop-website-make-right-decision/][Media Queries]]
  Selectively apply styles based on screen size
  #+begin_example css
  @media (max-width: 600px) {
    body {
      font-size: 16px;
    }
  }
  #+end_example

  - These also work with flexboxes:
    #+begin_src html
    <html>
      <head>
        <style>
          .flex-container {
          display: flex;
          flex-wrap: nowrap;
          background-color: DodgerBlue;
          }

          .flex-container > div {
          background-color: #f1f1f1;
          width: 100px;
          margin: 10px;
          text-align: center;
          line-height: 75px;
          font-size: 30px;
          }

          @media (max-width: 600px) {
          .flex-container {
          flex-direction: column;
          align-items: center;
          }
          }

        </style>
      </head>
      <body>
        ...
      </body>
    </html>
    #+end_src
** Auditing for Accessibility
- [[https://developer.chrome.com/docs/lighthouse/][Lighthouse - Chrome Add-On]]
- [[https://wave.webaim.org/extension/][WAVE Web Accessibility Evaluation Tool]]

* Week 6 - CSS Libraries
** CSS Libs
Building a professional website from scratch is a LOT of work.
1. Grid layouts that work on desktop AND mobile
2. Styled buttons
3. Forms that work...

Rather than re-inventing the wheel, you can use existing tools:
1. [[https://getbootstrap.com/][Bootstrap]]
2. [[https://tailwindcss.com/][Tailwind]]
3. [[https://bulma.io/][Bulma]]
   1. [[https://2022.stateofcss.com/en-US/css-frameworks/][Stats on these frameworks]]


** Adding Botstrap
- [[https://designmodo.com/migrate-bootstrap-5/][Adding bootstrap to a project]]
- [[https://getbootstrap.com/docs/5.3/getting-started/introduction/][Official Bootstrap Docs]]

Example:
#+begin_example html
<head>
  <title>My Music Page</title>

  <!-- Link to Bootstrap, MUST come before your style.css -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

  <!-- Link to Your Custom Stylesheet -->
  <link rel="stylesheet" href="css/style.css">
</head>
#+end_example

** Using Bootstrap Classes
** Bootstrap Docs
* Week 8 - Intro to JavaScript
- [[https://github.com/allhailthetail/csc230-taste-tracker][Link to Repo with Submitted Content]]

- [[https://medium.com/swlh/introduction-to-javascript-basics-cf901c05ca47][Medium - Intro to JS]]

- W3S links:
  - [[https://www.w3schools.com/js/js_variables.asp][JS Variables]]
  - [[https://www.w3schools.com/js/js_datatypes.asp][JS Data Types]]
  - [[https://www.w3schools.com/js/js_functions.asp][JS Functions]]
  - [[https://www.w3schools.com/jsref/jsref_obj_array.asp][JS Arrays]]
  - [[https://www.w3schools.com/js/js_if_else.asp][JS If Else]]
  - [[https://www.w3schools.com/js/js_loop_for.asp][JS Loops]]

- You do need to let your HTML page know about your .js file:
  #+begin_example html
  <!-- Inside your HTML file -->
  <script src="script.js"></script>
  #+end_example

* Week 9 - DOM & JavaScript Events
** Resource Links
- [[https://www.w3schools.com/jsref/met_document_getelementbyid.asp][getElementById()]]
- [[https://www.w3schools.com/jsref/dom_obj_event.asp][DOM Events Reference Page]]
- [[https://www.w3schools.com/js/js_htmldom_eventlistener.asp][addEventListener() JS Method]]
- [[https://www.w3schools.com/jsref/met_document_queryselectorall.asp][querySelectorAll() method]]
- [[https://www.w3schools.com/jsref/jsref_foreach.asp][forEach() JS method]]
- [[https://www.w3schools.com/tags/att_data-.asp][data-* HTML attribute]]

** DOM DOM DOM DOOOOM - Understanding the DOM
- The *Document Object Model* allows for the creation of interactive websites, by allowing JavaScript
  to interact with the HTML on the page.
  #+begin_example html
  <!DOCTYPE html>
  <html>
    <head>
      <title></title>
    </head>
    <body>
      <h1 id = "header1">My first header</h1>
      <h1 id = "header2">My second header</h1>
    </body>
  </html>
  #+end_example

  The result is a tree-based structure:
  HTML -> {head: {title}, body: {h1},{h2}}
  _Every_ tag is a node and can be accessed and changed by your JavaScript.

- Selecting elements with JavaScript:
  Say your HTML has the following structure
  #+begin_example html
  <!--It's critical you rememebr to load your .js script!!-->
  <script src="./js/script.js"></script>

  <h1 class="mb-3" id="page-title">Welcome to the Mood Tracker!</h1>
  <p id="mood-instructions">Track how you're feeling today.</p>
  #+end_example

  - Your resulting JavaScript then would look like:
    #+begin_example js :file script.js
    let title = document.getElementById("page-title");
    let instructions = document.getElementById("mood-instructions");
    console.log(title);         // You should literally see the <title> tag in the
    console.log(instructions);

    // Now, say you wanted to change a value...
    title.textContent = "How Are You Feeling Today?";
    instructions.textContent = "Click a mood below to begin.";
    #+end_example

** Event-driven Programming
- Common events you want to drive the site:
  * clicks
  * mouse movement
  * key presses
  * /resizing a window/

*** Responding to button clicks:
- For a simple scenario, name all your buttons with ~class~ in the HTML tags (i.e. /mood-buttons/)
  Or, potentially just name an entire container /mood-buttons/?
  #+begin_example html
  <div class="mood-buttons col-6 col-md-3">
    <button class="btn btn-outline-primary w-100">😊</button>
    ...more buttons not shown
  </div>
  #+end_example

  - Then, your Java script gets programmed as shown in this toy example:
    #+begin_example js
    // This should find all the buttons inside the <div> container named mood-buttons?
    let buttons = document.querySelectorAll("#mood-buttons button");
    console.log(buttons);

    // Now, you could loop over each button and cause somethng to happen if the user
    //   clicks a particular one...c
    buttons.forEach(fuction(button){
      // Code you want to run for each button
      button.addEventListener("click", function() {
        console.log("button clicked!");
      })
    })

    // More interesting example: change HTML elements depending on choice...
    let buttons = document.querySelectorAll("#mood-buttons button");

    buttons.forEach(function(button){
      button.addEventListener("click", function() {
        let emoji = button.textContent;
        let output = document.getElementById("output-message");
        output.textContent = `You're feeling ${emoji} today!`;
        // Similar to writing "You're feeeling " + emoji + " today!"
      })
    })
    #+end_example

- Or, a slightly more interesting example:
  (Note that the code is using [[https://www.w3schools.com/js/js_string_templates.asp][JS string interpolation]].)
  #+begin_example js
  let buttons = document.querySelectorAll("#mood-buttons button");

  buttons.forEach(function(button){
    button.addEventListener("click", function() {
      let emoji = button.textContent;
      let output = document.getElementById("output-message");
      output.textContent = `You're feeling ${emoji} today!`;
      // Similar to writing "You're feeeling " + emoji + " today!"
    })
  })
  #+end_example

- Finally, where we're actually going with this:
  #+begin_example js
  let buttons = document.querySelectorAll("#mood-buttons button");

  buttons.forEach(function(button){
    button.addEventListener("click", function() {
      // Remove the selected class from all button
      buttons.forEach(function(btn) {
        btn.classList.remove("selected");
      });
      // Add the selected class to only the one that is clicked
      button.classList.add("selected");

      // Code from previous step
      let emoji = button.textContent;
      let output = document.getElementById("output-message");
      output.textContent = `You're feeling ${emoji} today!`;
      // Similar to writing "You're feeeling " + emoji + " today!"

    })
  })
  #+end_example

** Data Attributes
HINT: You're going to use these data attributes to track the _answers_ for later use...

[[https://www.w3schools.com/tags/att_data-.asp][Data attributes]] allow developers to embed custom data attributes on ANY HTML element. This stored /custom/ data
can be used by the page's JavaScript to improve the user experience, all  _without any additional burden server-side_!

- Basic format: ~data-*~ where * can be any _lowercase_ character or character sequence, "string."
  #+begin_example html
  <!--Here, we see animal-type is encoded in each list item...-->
  <ul>
    <li data-animal-type="bird">Owl</li>
    <li data-animal-type="fish">Salmon</li>
    <li data-animal-type="spider">Tarantula</li>
  </ul>
  #+end_example

- So, for example, you might add a ~data-mood~ data attribute to the mood tracker example:
  #+begin_example html
  <div id="mood-buttons" class="row g-2 my-3">
    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-mood="happy">😊</button>
    </div>
    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-mood="tired">😴</button>
    </div>
    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-mood="angry">😠</button>
    </div>
    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-mood="confused">😕</button>
    </div>
  </div>
  #+end_example

  - Subsequently, your JavaScript would look like:
    #+begin_example js
    let buttons = document.querySelectorAll("#mood-buttons button");

    buttons.forEach(function(button) {
      button.addEventListener("click", function() {
        // Previous highlight button code
        buttons.forEach(function(btn) {
          btn.classList.remove("selected");
        });
        button.classList.add("selected");


        let mood = button.getAttribute("data-mood");
        let output = document.getElementById("output-message");

        // Now we can write different responses based on the mood
        if (mood === "happy") {
          output.textContent = "Yay! Glad you're feeling happy today 🎉";
        } else if (mood === "tired") {
          output.textContent = "Take it easy—you’ve earned some rest 😴";
        } else if (mood === "angry") {
          output.textContent = "Deep breaths. Tomorrow is a new day 😤";
        } else if (mood === "confused") {
          output.textContent = "Confusion is a sign of growth 🤔";
        }
      });
    });
    #+end_example
*** Tracking and Storing Data
- *This is a big deal, because it's allowing you to separate the logic from the presentation*

- Oftentimes, it's desirable to track information for use later in the program.
  To do this, you're storing things in an array... The general process:

  1. Create an empty object to store user data
  2. Get data using the dataset (JavaScript) attribute
  3. Store/append the data to the object

- One more example of the mood tracker:
  #+begin_example html
  <div id="mood-buttons" class="row g-2 my-3">
    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-buttonid = "1" data-mood="happy">😊</button>
    </div>

    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-buttonid = "1" data-mood="tired">😴</button>
    </div>

    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-buttonid = "1" data-mood="angry">😠</button>
    </div>

    <div class="col-6 col-md-3">
      <button class="btn btn-outline-primary w-100" data-buttonid = "1" data-mood="confused">😕</button>
    </div>
  </div>
  #+end_example

  #+begin_example js
  let buttons = document.querySelectorAll("#mood-buttons button");
  // 1. Create an empty object that will store user data
  let userAnswers = {}
  buttons.forEach(function(button) {
    button.addEventListener("click", function() {
      // Highlight button code not shown

      // 2. Get the data using the dataset attribute
      let buttonID = button.dataset.buttonid;
      let response = button.dataset.mood;
      // 3. Store the data in the object
      userAnswers[buttonID] = response;
      console.log(userAnswers); // See current stored answers

      // Mood implementaiton code now sown
    });
  });
  #+end_example
